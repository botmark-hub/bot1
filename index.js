// === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===
// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÇ‡∏´‡∏°‡∏î production
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ library ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const express = require('express'); // ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const bodyParser = require('body-parser'); // ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô JSON
const axios = require('axios'); // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á HTTP request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Webex API
const fs = require('fs'); // ‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
const FormData = require('form-data'); // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
const { google } = require('googleapis'); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets / Google Drive

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const app = express();
app.use(bodyParser.json()); // ‡πÉ‡∏´‡πâ express ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏î‡πâ

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
const PORT = process.env.PORT || 3000;
const WEBEX_BOT_TOKEN = process.env.WEBEX_BOT_TOKEN; // token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Webex
const GOOGLE_SHEET_FILE_ID = process.env.GOOGLE_SHEET_FILE_ID; // ID ‡∏Ç‡∏≠‡∏á Google Sheet
const WEBEX_BOT_NAME = 'bot_small'; // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô Webex
const BOT_ID = (process.env.BOT_ID || '').trim(); // ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google API ‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (Service Account)
const rawCreds = JSON.parse(process.env.GOOGLE_CREDENTIALS); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Key ‡∏Ç‡∏≠‡∏á Google
rawCreds.private_key = rawCreds.private_key.replace(/\\n/g, '\n'); // ‡πÅ‡∏Å‡πâ format ‡∏Ç‡∏≠‡∏á private key

const auth = new google.auth.GoogleAuth({
  credentials: rawCreds,
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets', // ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Google Sheets
    'https://www.googleapis.com/auth/drive.readonly' // ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡πà‡∏≤‡∏ô Google Drive
  ]
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Google Sheets API
const sheets = google.sheets({ version: 'v4', auth });

// === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===

// ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡πÜ ‡πÅ‡∏•‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
function flattenText(text) {
  return (text || '').toString().replace(/\n/g, ' ').replace(/\s+/g, ' ').trim();
}

// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á row ‡∏ó‡∏µ‡πà 2 ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏ß‡πà‡∏≤ keyword ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô header ‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤
function getCellByHeader2(rowArray, headerRow2, keyword) {
  const idx = headerRow2.findIndex(h =>
    h.trim().toLowerCase().includes(keyword.toLowerCase())
  );
  return idx !== -1 ? flattenText(rowArray[idx]) : '-';
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• 1 ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
function formatRow(rowObj, headerRow2, index, sheetName) {
  const rowArray = Object.values(rowObj);
  return `üìÑ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï: ${sheetName} (‡πÅ‡∏ñ‡∏ß ${index + 3})\n` +
    `üìù ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô: ${flattenText(rowObj['‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô'])} | üßæ WBS: ${flattenText(rowObj['WBS'])}\n` +
    `üí∞ ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô/‡∏•‡∏ß.: ${flattenText(rowObj['‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô/‡∏•‡∏ß.'])} | ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏•‡∏ß.: ${flattenText(rowObj['‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏•‡∏ß.'])} | üìÇ ‡∏£‡∏±‡∏ö‡πÅ‡∏ü‡πâ‡∏°: ${flattenText(rowObj['‡∏£‡∏±‡∏ö‡πÅ‡∏ü‡πâ‡∏°'])}\n` +
    `üîå ‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á: ${flattenText(rowObj['‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á'])} | ‚ö° ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á HT: ${getCellByHeader2(rowArray, headerRow2, 'HT')} | ‚ö° ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á LT: ${getCellByHeader2(rowArray, headerRow2, 'LT')}\n` +
    `ü™µ ‡πÄ‡∏™‡∏≤ 8 : ${getCellByHeader2(rowArray, headerRow2, '8')} | ü™µ ‡πÄ‡∏™‡∏≤ 9 : ${getCellByHeader2(rowArray, headerRow2, '9')} | ü™µ ‡πÄ‡∏™‡∏≤ 12 : ${getCellByHeader2(rowArray, headerRow2, '12')} | ü™µ ‡πÄ‡∏™‡∏≤ 12.20 : ${getCellByHeader2(rowArray, headerRow2, '12.20')}\n` +
    `üë∑‚Äç‚ôÇÔ∏è ‡∏û‡∏ä‡∏á.‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°: ${flattenText(rowObj['‡∏û‡∏ä‡∏á.‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°'])}\n` +
    `üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: ${flattenText(rowObj['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô'])} | üìä ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏á‡∏≤‡∏ô: ${flattenText(rowObj['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏á‡∏≤‡∏ô'])}\n` +
    `üóíÔ∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${flattenText(rowObj['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏'])}`;
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Google Sheets
async function getAllSheetNames(spreadsheetId) {
  const res = await sheets.spreadsheets.get({ spreadsheetId });
  return res.data.sheets.map(sheet => sheet.properties.title);
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á 2 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
async function getSheetWithHeaders(sheets, spreadsheetId, sheetName) {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `${sheetName}!A1:Z`
  });

  const rows = res.data.values;
  if (!rows || rows.length < 3) return { data: [], rawHeaders2: [] };

  const headerRow1 = rows[0];
  const headerRow2 = rows[1];

  const headers = headerRow1.map((h1, i) => {
    const h2 = headerRow2[i] || '';
    return h2 ? `${h1} ${h2}`.trim() : h1.trim();
  });

  const dataRows = rows.slice(2); // ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á

  return {
    data: dataRows.map(row => {
      const rowData = {};
      headers.forEach((header, i) => {
        rowData[header] = row[i] || '';
      });
      return rowData;
    }),
    rawHeaders2: headerRow2
  };
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≠‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 7000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
async function sendMessageInChunks(roomId, message) {
  const CHUNK_LIMIT = 7000;
  for (let i = 0; i < message.length; i += CHUNK_LIMIT) {
    const chunk = message.substring(i, i + CHUNK_LIMIT);
    await axios.post('https://webexapis.com/v1/messages', {
      roomId,
      text: chunk
    }, {
      headers: { Authorization: `Bearer ${WEBEX_BOT_TOKEN}` }
    });
  }
}

// ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏≤‡∏á Webex
async function sendFileAttachment(roomId, filename, content) {
  const filePath = `/tmp/${filename}`;
  fs.writeFileSync(filePath, content, 'utf8');

  const form = new FormData();
  form.append('roomId', roomId);
  form.append('files', fs.createReadStream(filePath));

  await axios.post('https://webexapis.com/v1/messages', form, {
    headers: {
      Authorization: `Bearer ${WEBEX_BOT_TOKEN}`,
      ...form.getHeaders()
    }
  });

  fs.unlinkSync(filePath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
}

// === ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Webex ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ===
app.post('/webex', async (req, res) => {
  try {
    const data = req.body.data;
    const personId = (data.personId || '').trim();
    if (personId === BOT_ID) return res.status(200).send('Ignore self-message'); // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö

    const messageId = data.id;
    const roomId = data.roomId;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    const messageRes = await axios.get(`https://webexapis.com/v1/messages/${messageId}`, {
      headers: { Authorization: `Bearer ${WEBEX_BOT_TOKEN}` }
    });

    let messageText = messageRes.data.text;
    if (messageText.toLowerCase().startsWith(WEBEX_BOT_NAME)) {
      messageText = messageText.substring(WEBEX_BOT_NAME.length).trim();
    }

    // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const [command, ...args] = messageText.split(' ');
    const keyword = args.join(' ').trim();
    const allSheetNames = await getAllSheetNames(GOOGLE_SHEET_FILE_ID);
    let responseText = '';

    // === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á ===
    if (command === 'help') {
      responseText = `üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n` +
        `1. @bot_small ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ <‡∏Ñ‡∏≥> ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï\n` +
        `2. @bot_small ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> ‚Üí ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï (‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß)\n` +
        `3. @bot_small ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå> <‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>\n` +
        `4. @bot_small help ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`;
    } else if (command === '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤') {
      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏µ‡∏ï
      if (allSheetNames.includes(keyword)) {
        const { data, rawHeaders2 } = await getSheetWithHeaders(sheets, GOOGLE_SHEET_FILE_ID, keyword);
        const resultText = data.map((row, idx) => formatRow(row, rawHeaders2, idx, keyword)).join('\n\n');
        if (resultText.length > 7000) {
          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÅ‡∏ô‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô
          await axios.post('https://webexapis.com/v1/messages', {
            roomId,
            markdown: 'üìé ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏ô‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô'
          }, {
            headers: { Authorization: `Bearer ${WEBEX_BOT_TOKEN}` }
          });
          await sendFileAttachment(roomId, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.txt', resultText);
          return res.status(200).send('sent file');
        } else {
          responseText = resultText;
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï
        let results = [];
        for (const sheetName of allSheetNames) {
          const { data, rawHeaders2 } = await getSheetWithHeaders(sheets, GOOGLE_SHEET_FILE_ID, sheetName);
          data.forEach((row, idx) => {
            const match = Object.values(row).some(v => flattenText(v).includes(keyword));
            if (match) results.push(formatRow(row, rawHeaders2, idx, sheetName));
          });
        }
        responseText = results.length ? results.join('\n\n') : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
      }
    } else if (command === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') {
      // ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (args.length < 4) {
        responseText = '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå> <‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>';
      } else {
        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï 1 ‡∏´‡∏£‡∏∑‡∏≠ 2 ‡∏Ñ‡∏≥
        let sheetName = '';
        let columnName = '';
        let rowIndex = 0;
        let newValue = '';

        let trySheetName = args[0] + ' ' + args[1];
        if (allSheetNames.includes(trySheetName)) {
          sheetName = trySheetName;
          columnName = args[2];
          rowIndex = parseInt(args[3]);
          newValue = args.slice(4).join(' ');
        } else if (allSheetNames.includes(args[0])) {
          sheetName = args[0];
          columnName = args[1];
          rowIndex = parseInt(args[2]);
          newValue = args.slice(3).join(' ');
        } else {
          responseText = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï‡∏ä‡∏∑‡πà‡∏≠ "${args[0]}" ‡∏´‡∏£‡∏∑‡∏≠ "${trySheetName}"`;
        }

        if (sheetName) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ column ‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const res = await sheets.spreadsheets.values.get({
            spreadsheetId: GOOGLE_SHEET_FILE_ID,
            range: `${sheetName}!A1:Z2`
          });
          const header1 = res.data.values[0];
          const header2 = res.data.values[1];
          const headers = header1.map((h1, i) => `${h1} ${header2[i] || ''}`.trim());
          const colIndex = headers.findIndex(h => h.includes(columnName));
          if (colIndex === -1) {
            responseText = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "${columnName}"`;
          } else {
            const colLetter = String.fromCharCode(65 + colIndex);
            const range = `${sheetName}!${colLetter}${rowIndex}`;
            await sheets.spreadsheets.values.update({
              spreadsheetId: GOOGLE_SHEET_FILE_ID,
              range,
              valueInputOption: 'USER_ENTERED',
              requestBody: { values: [[newValue]] }
            });
            responseText = `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ${range} ‚Üí ${newValue}`;
          }
        }
      }
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡πà‡∏á
      responseText = '‚ùì ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "help"';
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    await sendMessageInChunks(roomId, responseText);
    res.status(200).send('OK');
  } catch (err) {
    console.error('‚ùå ERROR:', err.stack || err.message);
    res.status(500).send('Error');
  }
});

// === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ===
app.listen(PORT, () => console.log(`üöÄ Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`));