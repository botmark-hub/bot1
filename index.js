if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const { google } = require('googleapis');
const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const WEBEX_BOT_TOKEN = process.env.WEBEX_BOT_TOKEN;
const GOOGLE_SHEET_FILE_ID = process.env.GOOGLE_SHEET_FILE_ID;
const WEBEX_BOT_NAME = 'bot';
const BOT_ID = process.env.BOT_ID;

const rawCreds = JSON.parse(process.env.GOOGLE_CREDENTIALS);
rawCreds.private_key = rawCreds.private_key.replace(/\\n/g, '\n');

const auth = new google.auth.GoogleAuth({
  credentials: rawCreds,
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive.readonly'
  ]
});

const sheets = google.sheets({ version: 'v4', auth });
const drive = google.drive({ version: 'v3', auth });

async function getAllSheetNames(spreadsheetId) {
  const res = await sheets.spreadsheets.get({ spreadsheetId });
  return res.data.sheets.map(sheet => sheet.properties.title);
}

async function getSheetWithCombinedHeaders(sheets, spreadsheetId, sheetName) {
  const res = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `${sheetName}!A1:Z2`
  });

  const rows = res.data.values;
  if (!rows || rows.length < 2) return [];

  const combinedHeaders = rows[0].map((h, i) =>
    `${(h || '').trim().replace(/\s+/g, ' ')} ${(rows[1][i] || '').trim().replace(/\s+/g, ' ')}`.trim()
  );

  const resData = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range: `${sheetName}!A3:Z`
  });
  const dataRows = resData.data.values || [];

  return dataRows.map(row => {
    const rowData = {};
    combinedHeaders.forEach((header, i) => {
      rowData[header] = row[i] || '';
    });
    return rowData;
  });
}

function formatRow(row, sheetName, index) {
  return `üìÑ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï: ${sheetName} (‡πÅ‡∏ñ‡∏ß ${index + 3})\n` +
    ` ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô: ${row['‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô']} | WBS: ${row['WBS']}\n` +
    ` ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô/‡∏•‡∏ß: ${row['‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô/‡∏•‡∏ß']} | ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏•‡∏ß.: ${row['‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏•‡∏ß.']} | ‡∏£‡∏±‡∏ö‡πÅ‡∏ü‡πâ‡∏°: ${row['‡∏£‡∏±‡∏ö‡πÅ‡∏ü‡πâ‡∏°']}\n` +
    ` ‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á: ${row['‡∏´‡∏°‡πâ‡∏≠‡πÅ‡∏õ‡∏•‡∏á']} | ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á HT: ${row['‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á HT']} | ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á LT: ${row['‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á LT']}\n` +
    ` ‡πÄ‡∏™‡∏≤ 8 : ${row['‡πÄ‡∏™‡∏≤ 8'] || '-'} | ‡πÄ‡∏™‡∏≤ 9 : ${row['‡πÄ‡∏™‡∏≤ 9'] || '-'} | ‡πÄ‡∏™‡∏≤ 12 : ${row['‡πÄ‡∏™‡∏≤ 12'] || '-'} | ‡πÄ‡∏™‡∏≤ 12.20 : ${row['‡πÄ‡∏™‡∏≤ 12.20'] || '-'}\n` +
    ` ‡∏û‡∏ä‡∏á.‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°: ${row['‡∏û‡∏ä‡∏á.‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°']}\n` +
    ` ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: ${row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô']} | ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏á‡∏≤‡∏ô: ${row['‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏á‡∏≤‡∏ô']}\n` +
    ` ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ${row['‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏']}`;
}

app.post('/webex', async (req, res) => {
  try {
    const data = req.body.data;

    if (data.personId === BOT_ID) {
      return res.status(200).send('Ignore self-message');
    }

    const messageId = data.id;
    const roomId = data.roomId;

    const messageRes = await axios.get(`https://webexapis.com/v1/messages/${messageId}`, {
      headers: { Authorization: `Bearer ${WEBEX_BOT_TOKEN}` }
    });
    let messageText = messageRes.data.text;

    if (messageText.toLowerCase().startsWith(WEBEX_BOT_NAME)) {
      messageText = messageText.substring(WEBEX_BOT_NAME.length).trim();
    }

    let responseText = '';
    const [command, ...args] = messageText.split(' ');
    const allSheetNames = await getAllSheetNames(GOOGLE_SHEET_FILE_ID);

    if (command === 'help') {
      responseText = `üìå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n` +
        `1. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ <‡∏Ñ‡∏≥> ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß\n` +
        `2. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n` +
        `3. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå> ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô\n` +
        `4. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå> <‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°> ‚Üí ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ã‡∏•‡∏•‡πå\n` +
        `5. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á help ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`;
    } else if (command === '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤') {
      const keyword = args.join(' ');

      if (args.length === 2 && allSheetNames.includes(args[0])) {
        const data = await getSheetWithCombinedHeaders(sheets, GOOGLE_SHEET_FILE_ID, args[0]);
        responseText = data.map((row, idx) => `${args[1]}: ${row[args[1]]}`).join('\n');
      } else if (args.length === 1 && allSheetNames.includes(args[0])) {
        const data = await getSheetWithCombinedHeaders(sheets, GOOGLE_SHEET_FILE_ID, args[0]);
        responseText = data.map((row, idx) => formatRow(row, args[0], idx)).join('\n\n');
      } else {
        let results = [];
        for (const sheetName of allSheetNames) {
          const data = await getSheetWithCombinedHeaders(sheets, GOOGLE_SHEET_FILE_ID, sheetName);
          data.forEach((row, idx) => {
            const match = Object.values(row).some(v => v.includes(keyword));
            if (match) results.push(formatRow(row, sheetName, idx));
          });
        }
        responseText = results.length ? results.join('\n\n') : '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
      }
    } else if (command === '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç') {
      if (args.length < 5) {
        responseText = '‚ùó ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô:\n‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï> <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå> <‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà> <‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°>';
      } else {
        const sheetName = `${args[0]} ${args[1]}`;
        const columnName = args[2];
        const rowNumberStr = args[3];
        const valueParts = args.slice(4);
        const newValue = valueParts.join(' ');
        const rowNumber = parseInt(rowNumberStr);

        if (!allSheetNames.includes(sheetName)) {
          responseText = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï‡∏ä‡∏∑‡πà‡∏≠ "${sheetName}"`;
        } else {
          const res = await sheets.spreadsheets.values.get({
            spreadsheetId: GOOGLE_SHEET_FILE_ID,
            range: `${sheetName}!A1:Z2`
          });
          const headers = res.data.values;
          if (!headers || headers.length < 2) {
            responseText = '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î header ‡πÑ‡∏î‡πâ';
          } else {
            const combinedHeaders = headers[0].map((h, i) =>
              `${(h || '').trim()} ${(headers[1][i] || '').trim()}`.trim()
            );

            const columnIndex = combinedHeaders.findIndex(h =>
              h.toLowerCase() === columnName.toLowerCase() ||
              h.toLowerCase().endsWith(' ' + columnName.toLowerCase()) ||
              h.toLowerCase().includes(columnName.toLowerCase())
            );

            if (columnIndex === -1) {
              responseText = `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "${columnName}" ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï "${sheetName}"`;
            } else {
              const matchedHeader = combinedHeaders[columnIndex];
              const columnLetter = String.fromCharCode(65 + columnIndex);
              const targetCell = `${columnLetter}${rowNumber}`;
              await sheets.spreadsheets.values.update({
                spreadsheetId: GOOGLE_SHEET_FILE_ID,
                range: `${sheetName}!${targetCell}`,
                valueInputOption: 'USER_ENTERED',
                requestBody: { values: [[newValue]] }
              });
              responseText = `‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${sheetName}!${targetCell} (${matchedHeader}) ‡πÄ‡∏õ‡πá‡∏ô "${newValue}" ‡πÅ‡∏•‡πâ‡∏ß`;
            }
          }
        }
      }
    } else {
      responseText = '‚ùì ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "bot help"';
    }

    await axios.post('https://webexapis.com/v1/messages', {
      roomId,
      text: responseText
    }, {
      headers: { Authorization: `Bearer ${WEBEX_BOT_TOKEN}` }
    });

    res.status(200).send('OK');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error');
  }
});

app.listen(PORT, () => console.log(`üöÄ Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`));